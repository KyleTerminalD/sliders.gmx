<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Create puzzle pieces
piece_grid = ds_grid_create(3, 3)
sprite_w = 64
mouse_down = false
for( var yy = 0; yy &lt; 3; yy++){
    for( var xx= 0; xx &lt; 3; xx++){
        var t_piece = instance_create((xx + 0.5) * sprite_w, (yy + 0.5) * sprite_w, obj_pieces);
        t_piece.number = 1 + xx + (yy * 3);
        t_piece.image_xscale = 2
        t_piece.image_yscale = 2
        piece_grid[ xx, yy] = t_piece;
    }
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Input control

if(mouse_check_button_pressed(mb_left)){
    start_x = mouse_x;
    start_y = mouse_y;
    puzzle_x = mouse_x div sprite_w;
    puzzle_y = mouse_y div sprite_w;
} else if(mouse_check_button(mb_left)){
    dif_x = mouse_x - start_x;
    dif_y = mouse_y - start_y;
    if( abs(dif_x) &gt; abs(dif_y)){
        for(var i = 0; i &lt; 3; i++){
            var t_piece = piece_grid[ i, puzzle_y];
            t_piece.x = dif_x + sprite_w * i;
            if(t_piece.x &gt; sprite_w * 3){
                t_piece.x -= sprite_w * 3;
            } else if(t_piece.x &lt; 0){
                t_piece.x += sprite_w * 3;
            }
            
        }
    } else {
        for(var i = 0; i &lt; 3; i++){
            var t_piece = piece_grid[ puzzle_x, i];
            t_piece.y = dif_y + sprite_w * i;
            if(t_piece.y &gt; sprite_w * 3){
                t_piece.y -= sprite_w * 3;
            } else if(t_piece.y &lt; 0){
                t_piece.y += sprite_w * 3;
            }
            
        }
    }
}
if(mouse_check_button_released(mb_left)){
    dif_x = mouse_x - start_x;
    dif_y = mouse_y - start_y;
    if( abs(dif_x) &gt; abs(dif_y)){
        step = dif_x div sprite_w;
        temp_a = piece_grid[ 0, puzzle_y];
        temp_b = piece_grid[ 1, puzzle_y];
        temp_b = piece_grid[ 2, puzzle_y];
        if( sign(step) == -1){
            piece_grid[ 3 + step, puzzle_y];
            
        } else {
        
        }
    } else {
    
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
